# version: '3.8'
# services: 
#   bot:
#     build: 
#       context: . 
#       dockerfile: Dockerfile
#     restart: always
#     env_file:
#       - .env
#     depends_on:
#       - db
#   db:
#     image: postgres:14-alpine
#     restart: always
#     environment: 
#       POSTGRES_USER: ${DB_USER}
#       POSTGRES_PASSWORD: ${DB_PASSWORD}
#       POSTGRES_DB: ${DB_NAME}
#     volumes: 
#     - db_data:/var/lib/postgresql/data
#     ports:
#     - "5432:5432"
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
#       interval: 5s
#       timeout: 5s 
#       retries: 5

# volumes:
#   db_data:

version: '3.8'

services: 
  bot:
    build:
      context: . 
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    depends_on:
      initializer: 
        condition: service_completed_successfully

  db:
    image: postgres:14-alpine
    restart: always
    environment: 
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck: 
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s 
      timeout: 5s
      retries: 5

  initializer: 
    build: .
    restart: "no"
    env_file: 
      - .env
    depends_on:
      db: 
        condition: service_healthy
    command: sh -c "npx ts-node src/utils/init-db.ts"

volumes: 
  db_data: