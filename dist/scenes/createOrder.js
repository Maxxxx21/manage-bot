"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createOrderScene = void 0;
const telegraf_1 = require("telegraf");
const keyboards_1 = require("../utils/keyboards");
const exitFunction_1 = require("../utils/exitFunction");
const password = "man";
exports.createOrderScene = new telegraf_1.Scenes.WizardScene(`createOrderScene`, async (ctx) => {
    const userId = await ctx.repository.getUser(ctx.from.id);
    const roleManagerId = await ctx.repository.getRoleIdByName(`üë®‚Äçüíº–ú–µ–Ω–µ–¥–∂–µ—Ä`);
    const isManager = await ctx.repository.checkRegisteredUser(userId, roleManagerId);
    if (!isManager) {
        await ctx.reply(`–≠—Ç–∞ –æ–ø—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è üë®‚Äçüíº–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É: /register.`);
        return ctx.scene.leave();
    }
    else if (isManager) {
        return ctx.wizard.next();
    }
}, async (ctx) => {
    if (!ctx.message || !('text' in ctx.message)) {
        await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`, keyboards_1.keyboards.confirmKeyboard);
        return;
    }
    ;
    await ctx.reply(`üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: `, keyboards_1.keyboards.exitKeyboard);
    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.message || !('text' in ctx.message)) {
        await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`, keyboards_1.keyboards.confirmKeyboard);
        return;
    }
    ;
    if (ctx.message.text === 'üö™–í—ã–π—Ç–∏') {
        await (0, exitFunction_1.exitFunction)(ctx, ctx.message.text);
    }
    ;
    if (ctx.message.text === password) {
        await ctx.reply(`‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π.`);
        await ctx.reply(`üìù –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: \nüí≥ IBAN üí≥\nüë§ –§–ò–û üë§ \nüíµ –°—É–º–º–∞ üíµ `, keyboards_1.keyboards.exitKeyboard);
        return ctx.wizard.next();
    }
    else if (ctx.message.text !== password) {
        await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`);
        //if (await exitFunction(ctx, ctx.message.text)) return ctx.scene.leave();
        return;
    }
}, async (ctx) => {
    if (!ctx.message || !('text' in ctx.message)) {
        await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. \n\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...`, keyboards_1.keyboards.startKeyboard);
        return;
    }
    ;
    //if (await exitFunction(ctx, ctx.message.text)) return ctx.scene.leave();
    const inputLines = ctx.message.text.split(`\n`);
    if (inputLines.length !== 3) {
        await ctx.reply(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏ –æ—Ä–¥–µ—Ä–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ: \n1. IBAN \n2. –§–ò–û \n3. –°—É–º–º–∞`);
        return;
    }
    ;
    const [number, cardholder_name, amount] = inputLines;
    if (isNaN(parseFloat(amount.trim()))) {
        await ctx.reply(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.`);
        return;
    }
    ;
    const wizardState = ctx.wizard.state;
    wizardState.number = number.trim();
    wizardState.cardholder_name = cardholder_name.trim();
    wizardState.amount = amount.trim();
    await ctx.reply(`–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞:\n\nüí≥ ${wizardState.number}\nüë§ ${wizardState.cardholder_name}\nüíµ ${wizardState.amount} ‚Ç¨\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ "FD" –∏–ª–∏ "RD"`, keyboards_1.keyboards.fdOrRDKeyboard);
    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.message || !('text' in ctx.message)) {
        await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`, keyboards_1.keyboards.confirmKeyboard);
        return;
    }
    ;
    //if (await exitFunction(ctx, ctx.message.text)) return ctx.scene.leave();
    const fdOrRd = ctx.message.text.toLowerCase();
    const wizardState = ctx.wizard.state;
    if (fdOrRd === "fd") {
        const ordersWithTheSameIban = await ctx.repository.getOrdersByIbanFd(wizardState.number);
        wizardState.fd_rd = fdOrRd;
        if (ordersWithTheSameIban.length === 0) {
            await ctx.reply(`‚ÑπÔ∏è –ü–æ IBAN: ${wizardState.number} –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.`);
            await ctx.reply(`–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" üëá`, keyboards_1.keyboards.confirmKeyboard);
            return ctx.wizard.next();
        }
        else if (ordersWithTheSameIban.length > 0) {
            let message = `‚ö†Ô∏è –ü–æ –¥–∞–Ω–Ω–æ–º—É IBAN ${wizardState.number} –±—ã–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞:\n\n`;
            for (let order of ordersWithTheSameIban) {
                message += `\n\n–û—Ä–¥–µ—Ä ‚Ññ${order.id}\nüí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ${order.number}\n‚úçÔ∏è –¢–∏–ø: ${(order.fd_rd).toUpperCase()}\nüë§ –§–ò–û: ${order.cardholder_name}\nüíµ –°—É–º–º–∞: ${order.amount} ‚Ç¨\n-------------------------`;
            }
            ;
            await ctx.reply(message, keyboards_1.keyboards.confirmKeyboard);
            await ctx.reply(`–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å". üëá`, keyboards_1.keyboards.confirmKeyboard);
            return ctx.wizard.next();
        }
        ;
    }
    else if (fdOrRd === "rd") {
        wizardState.fd_rd = fdOrRd;
        await ctx.reply(`–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" üëá`, keyboards_1.keyboards.confirmKeyboard);
        return ctx.wizard.next();
    }
    else {
        await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –í–≤–µ–¥–∏—Ç–µ "FD" –∏–ª–∏ "RD".`);
        return;
    }
}, async (ctx) => {
    if (!ctx.message || !('text' in ctx.message)) {
        await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`, keyboards_1.keyboards.confirmKeyboard);
        return;
    }
    ;
    //if (await exitFunction(ctx, ctx.message.text)) return ctx.scene.leave();
    const confirm = ctx.message.text;
    if (confirm !== "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å") {
        await ctx.reply(`‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞.`, keyboards_1.keyboards.startKeyboard);
        return ctx.scene.leave();
    }
    const wizardState = ctx.wizard.state;
    if (!ctx.from) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. (ctx.from)`);
        await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`, keyboards_1.keyboards.startKeyboard);
        return ctx.scene.leave();
    }
    ;
    const managerId = await ctx.repository.getUser(ctx.from.id);
    const order = {
        manager_id: managerId,
        droper_id: null,
        number: wizardState.number,
        fd_rd: wizardState.fd_rd,
        cardholder_name: wizardState.cardholder_name,
        amount: wizardState.amount,
        status: 'open',
        created_at: new Date(),
        update_at: new Date(),
    };
    try {
        const newOrder = await ctx.repository.insertOrder(order.manager_id, order.droper_id, order.number, order.cardholder_name, order.fd_rd, order.amount);
        if (newOrder && newOrder.id) {
            await ctx.reply(`üéâ –û—Ä–¥–µ—Ä ‚Ññ${newOrder.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`);
        }
        const allUsersByRole = await ctx.repository.getAllDropers();
        const messageText = `‚ú® –ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä ‚Ññ${newOrder.id} —Å–æ–∑–¥–∞–Ω:\n\nüí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ${newOrder.number}\n‚úçÔ∏è –¢–∏–ø: ${newOrder.fd_rd}\nüë§ –§–ò–û: ${newOrder.cardholder_name}\nüíµ –°—É–º–º–∞: ${newOrder.amount} ‚Ç¨`;
        let successCount = 0;
        const takeOrderKeyboard = telegraf_1.Markup.inlineKeyboard([
            telegraf_1.Markup.button.callback(`–í–∑—è—Ç—å –æ—Ä–¥–µ—Ä`, `take_order_${newOrder.id}`)
        ]);
        for (let user of allUsersByRole) {
            try {
                await ctx.telegram.sendMessage(user.telegram_id, messageText, takeOrderKeyboard);
                successCount++;
            }
            catch (error) {
                console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, error);
            }
        }
        ;
        await ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${successCount}.\n\nüö™ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...`, keyboards_1.keyboards.startKeyboard);
        return ctx.scene.leave();
    }
    catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —ç—Ç–∞–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:`, error);
        await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —ç—Ç–∞–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.`);
        return ctx.scene.leave();
    }
    ;
});
