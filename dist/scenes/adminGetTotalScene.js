"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.adminGetTotalScene = void 0;
const telegraf_1 = require("telegraf");
const keyboards_1 = require("../utils/keyboards");
const exitFunction_1 = require("../utils/exitFunction");
const adminRepository_1 = require("../Repository/adminRepository");
const parseSingleDate = (dateInput) => {
    const dateRegex = /^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.([0-9]{4})$/;
    if (!dateRegex.test(dateInput))
        return null;
    const [day, month, year] = dateInput.split('.');
    return `${year}-${month}-${day}`;
};
const processDateInput = (dateInput) => {
    if (dateInput.includes('-')) {
        const dates = dateInput.split('-').map(d => d.trim());
        if (dates.length !== 2)
            return null;
        const startDate = parseSingleDate(dates[0]);
        const endDate = parseSingleDate(dates[1]);
        if (!startDate || !endDate)
            return null;
        if (new Date(startDate) > new Date(endDate))
            return null;
        return { startDate, endDate };
    }
    else {
        const singleDate = parseSingleDate(dateInput);
        if (!singleDate)
            return null;
        return { startDate: singleDate, endDate: singleDate };
    }
};
const formatedDateTime = (dateString) => {
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const formattedDate = `${day}.${month}.${year}`;
    const formattedTime = `${hours}:${minutes}`;
    return { formattedDate, formattedTime };
};
exports.adminGetTotalScene = new telegraf_1.Scenes.WizardScene("adminGetTotalScene", async (ctx) => {
    const allManagers = await ctx.adminRepository.getAllManagersForAdmin();
    const keyboard = (0, adminRepository_1.createManagerKeybord)(allManagers);
    await ctx.reply(`üë®‚Äçüíº –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∫–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±—É–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å?`, keyboard);
    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.message || !('text' in ctx.message)) {
        await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Å–µ –∑–∞–Ω–æ–≤–æ.`, keyboards_1.keyboards.adminActionsKeyboard);
        console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ —Å—Ü–µ–Ω—ã. –®–∞–≥ 0.`);
        return ctx.scene.leave();
    }
    if (await (0, exitFunction_1.exitFunction)(ctx, ctx.message.text))
        return;
    const wizardState = ctx.wizard.state;
    const managerToGetTotal = ctx.message.text;
    const manager = managerToGetTotal.split(` `);
    const id = Number(manager[1]);
    wizardState.id = id;
    if (isNaN(id)) {
        await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—Å–µ –∑–∞–Ω–æ–≤–æ.`, keyboards_1.keyboards.startKeyboard);
        return ctx.scene.leave();
    }
    await ctx.reply(`üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–µ–ø–æ–∑–∏—Ç–∞: `, keyboards_1.keyboards.fdOrRdTotalKeyboard);
    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.message || !('text' in ctx.message)) {
        await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`, keyboards_1.keyboards.startKeyboard);
        console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ —Å—Ü–µ–Ω—ã. –®–∞–≥ 1.`);
        return;
    }
    if (await (0, exitFunction_1.exitFunction)(ctx, ctx.message.text))
        return;
    const fdOdRdOrTotal = ctx.message.text.toLowerCase();
    const wizardState = ctx.wizard.state;
    if (fdOdRdOrTotal === 'fd') {
        wizardState.fd_rd_total = 'fd';
        await ctx.reply(`‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω–æ—á–Ω—É—é –¥–∞—Ç—É/–ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–û–¥–∏–Ω–æ—á–Ω–∞—è –¥–∞—Ç–∞: –î–î.–ú–ú.–ì–ì–ì–ì\n\n–ü–µ—Ä–∏–æ–¥: –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì: `, keyboards_1.keyboards.exitKeyboard);
        return ctx.wizard.next();
    }
    else if (fdOdRdOrTotal === 'rd') {
        wizardState.fd_rd_total = 'rd';
        await ctx.reply(`‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω–æ—á–Ω—É—é –¥–∞—Ç—É/–ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–û–¥–∏–Ω–æ—á–Ω–∞—è –¥–∞—Ç–∞: –î–î.–ú–ú.–ì–ì–ì–ì\n\n–ü–µ—Ä–∏–æ–¥: –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì: `, keyboards_1.keyboards.exitKeyboard);
        return ctx.wizard.next();
    }
    else if (fdOdRdOrTotal === '–æ–±—â–∞—è —Å—É–º–º–∞') {
        wizardState.fd_rd_total = 'total';
        await ctx.reply(`‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω–æ—á–Ω—É—é –¥–∞—Ç—É/–ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–û–¥–∏–Ω–æ—á–Ω–∞—è –¥–∞—Ç–∞: –î–î.–ú–ú.–ì–ì–ì–ì\n\n–ü–µ—Ä–∏–æ–¥: –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì: `, keyboards_1.keyboards.exitKeyboard);
        return ctx.wizard.next();
    }
    else {
        await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞.`, keyboards_1.keyboards.startKeyboard);
        return ctx.scene.leave();
    }
}, async (ctx) => {
    if (!ctx.message || !('text' in ctx.message)) {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –≤—Å–µ –∑–∞–Ω–æ–≤–æ.`);
        await ctx.reply(`‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å: `, keyboards_1.keyboards.startKeyboard);
        console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ —Å—Ü–µ–Ω—ã. –®–∞–≥ 2.`);
        return ctx.scene.leave();
    }
    if (await (0, exitFunction_1.exitFunction)(ctx, ctx.message.text))
        return;
    const userInput = ctx.message.text;
    const date = processDateInput(userInput);
    const wizardState = ctx.wizard.state;
    const fd_rd_total = wizardState.fd_rd_total;
    const id = wizardState.id;
    if (!date) {
        await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞.`, keyboards_1.keyboards.startKeyboard);
        return ctx.scene.leave();
    }
    if (fd_rd_total === 'fd' || fd_rd_total === 'rd') {
        const orderAmount = await ctx.adminRepository.getTotalFdOrRdAmountbyManager(id, fd_rd_total, date.startDate, date.endDate);
        const orders = await ctx.adminRepository.getAllFdOrRdOrdersByManager(id, fd_rd_total, date.startDate, date.endDate);
        const totalAmount = orderAmount?.total_fd_amount || 0;
        const fd_rd_display = fd_rd_total.toUpperCase();
        let message = `üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä ${id}\n`;
        message += `‚úçÔ∏è –¢–∏–ø: ${fd_rd_display}\n`;
        message += `üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount} ‚Ç¨\n`;
        message += `üóìÔ∏è –ü–µ—Ä–∏–æ–¥: ${date.startDate} - ${date.endDate}\n\n`;
        message += `üìã –°–ø–∏—Å–æ–∫ –û—Ä–¥–µ—Ä–æ–≤:\n\n`;
        orders.forEach((order) => {
            const dateTime = formatedDateTime(order.created_at);
            message += `- ‚Ññ${order.id} | ${(order.fd_rd).toUpperCase()} | ${order.cardholder_name} | ${order.amount} ‚Ç¨ | ${dateTime.formattedDate} ${dateTime.formattedTime}\n`;
        });
        await ctx.reply(message);
        await ctx.reply(`‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:`, keyboards_1.keyboards.startKeyboard);
        return ctx.scene.leave();
    }
    else if (wizardState.fd_rd_total === 'total') {
        const orderAmount = await ctx.adminRepository.getTotalAmountByManager(id, date.startDate, date.endDate);
        const orders = await ctx.adminRepository.getAllOrdersByManager(id, date.startDate, date.endDate);
        const totalAmount = orderAmount.total_amount;
        let message = `üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä ${id}\n`;
        message += `üìä –¢–∏–ø: –û–±—â–∞—è\n`;
        message += `üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount} ‚Ç¨\n`;
        message += `üóìÔ∏è –ü–µ—Ä–∏–æ–¥: ${userInput}\n\n`;
        message += `üìã –°–ø–∏—Å–æ–∫ –û—Ä–¥–µ—Ä–æ–≤:\n\n`;
        orders.forEach((order) => {
            const dateTime = formatedDateTime(order.created_at);
            message += `- ‚Ññ${order.id} | ${(order.fd_rd).toUpperCase()} | ${order.cardholder_name} | ${order.amount} ‚Ç¨ | ${dateTime.formattedDate} ${dateTime.formattedTime}\n`;
        });
        await ctx.reply(message);
        await ctx.reply(`üö™ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...`);
        await ctx.reply(`‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:`, keyboards_1.keyboards.startKeyboard);
        return ctx.scene.leave();
    }
    else {
        await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞.`, keyboards_1.keyboards.startKeyboard);
        console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å—É–º–º—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤. `);
        return ctx.scene.leave();
    }
});
