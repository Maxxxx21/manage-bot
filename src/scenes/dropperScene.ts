import { Telegraf, Scenes, Markup } from "telegraf";
import { MyContext, SessionData } from "../utils/types";
import { keyboards } from "../utils/keyboards";

const mailingToAllDroppers = async (ctx: MyContext) => {
    const AllDropers = await ctx.repository.getAllDropers();
    const order = await ctx.repository.getOrderById(ctx.session.orderId as number);
    const messageText = `‚ú® –ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä ‚Ññ${order.id} —Å–æ–∑–¥–∞–Ω:\n\n1. –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ${order.number}\n\n2. –¢–∏–ø: ${order.fd_rd}\n\n3. –§–ò–û: ${order.cardholder_name}\n\n4. –°—É–º–º–∞: ${order.amount}`;
    let successCount = 0;
                        
    const takeOrderKeyboard = Markup.inlineKeyboard([
        Markup.button.callback(`–í–∑—è—Ç—å –æ—Ä–¥–µ—Ä.`, `take_order_${order.id}`)
    ]);

    for (let user of AllDropers) {
        try {
            await ctx.telegram.sendMessage(user.telegram_id, messageText, takeOrderKeyboard); 
            successCount++;
        } catch(error) { 
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:  `, error); 
        }
    }
}

export const droperScene = new Scenes.WizardScene<MyContext>(`droperScene`,

     async (ctx) => {
        const userId = await ctx.repository.getUser(ctx.from!.id);
        const roleDroperId = await ctx.repository.getRoleIdByName(`‚õëÔ∏è–î—Ä–æ–ø–µ—Ä`);
        const isDroper = await ctx.repository.checkRegisteredUser(userId, roleDroperId as number);

        if (!isDroper) {
            await ctx.reply(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ "‚õëÔ∏è–î—Ä–æ–ø–µ—Ä", –≤–≤–µ–¥—è –∫–æ–º–µ–Ω–¥—É: /register`);
            return ctx.scene.leave();
        } else if (isDroper) {
            await ctx.reply(`üõÉ–ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞, –æ–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.`);
        }
    // },
    
    // async (ctx) => {
        const orderId = ctx.session.orderId;

        if(!orderId) {
            await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –æ—Ä–¥–µ—Ä. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.`);
            return ctx.scene.leave();
        }
        const droperId = await ctx.repository.getUser(ctx.from!.id);

        try {
            const success = await ctx.repository.takeOrHandleOrder(orderId, 'taken', droperId);

            if(!success) { 
                await ctx.reply("‚ö†Ô∏è –≠—Ç–æ—Ç –æ—Ä–¥–µ—Ä —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –¥—Ä–æ–ø–ø–µ—Ä–æ–º –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.");
                return ctx.scene.leave();
            }

            await ctx.reply(`‚úÖ –í—ã –≤–∑—è–ª–∏ –æ—Ä–¥–µ—Ä ‚Ññ${orderId}. \n\n–ü—Ä–æ—Å–∏–º –í–∞—Å –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.`);
            const order = await ctx.repository.getOrderById(orderId);
            const manager = order.manager_id;
            const telegramIdManager = await ctx.repository.getTelegramIdById(manager);
            const message1 = `‚úÖ –î—Ä–æ–ø–ø–µ—Ä ${droperId} –≤–∑—è–ª –í–∞—à –û—Ä–¥–µ—Ä ‚Ññ${order.id}`; 
            const messageToManager = await ctx.telegram.sendMessage(telegramIdManager, message1 );
            return ctx.wizard.next();
        } catch(error) { 
            console.error(`–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞.`, error);
            await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.`, keyboards.startKeyboard);
            return ctx.scene.leave();
        }
    }, 

    async (ctx) => {
        if(ctx.message && 'photo' in ctx.message) {
            const droperId = await ctx.repository.getUser(ctx.from!.id);
            const fileId: string = ctx.message.photo[ctx.message.photo.length - 1].file_id; 
            const caption = ctx.message.caption || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è';
            const orderId: number = ctx.session.orderId as number;
            const order = await ctx.repository.getOrderById(orderId);


            const manager = order.manager_id;
            const telegramIdManager = await ctx.repository.getTelegramIdById(manager);
            //const message1 = `‚úÖ –î—Ä–æ–ø–ø–µ—Ä ${droperId} –≤–∑—è–ª –í–∞—à –û—Ä–¥–µ—Ä ‚Ññ${order.id}`; 
            //const messageToManager = await ctx.telegram.sendMessage(telegramIdManager, message1 );

            try { 
                await ctx.repository.addScreenshot(order.id, fileId);
                await ctx.repository.updateOrderStatus(order.id, 'done');
                await ctx.reply(`‚úÖ –í–∞—à–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.`);
            } catch(error) { 
                await ctx.reply (`‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.`);
                console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤–Ω–µ—Å–µ–Ω–∏—è —Ñ–æ—Ç–æ –≤ –±–¥.`, error);

                mailingToAllDroppers;
                await ctx.repository.removeDroperFromOrderAndSetStatusOpen(order.id);
                delete ctx.session.orderId;
                return ctx.scene.leave();
            }
            
            await ctx.telegram.sendPhoto(telegramIdManager, fileId, {
                caption:`‚úÖ –î—Ä–æ–ø–ø–µ—Ä ${droperId} –∑–∞–≤–µ—Ä—à–∏–ª –æ—Ä–¥–µ—Ä ‚Ññ${order.id}.\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${caption}`
            });
            delete ctx.session.orderId;
            return ctx.scene.leave();

        } else if(ctx.message && 'text' in ctx.message) {
            const droperId: number  = await ctx.repository.getUser(ctx.from!.id);
            const order = await ctx.repository.getOrderById(ctx.session.orderId as number);
            const managerId: number = order.manager_id;
            const telegramIdManager: number = await ctx.repository.getTelegramIdById(managerId); 

            const droperCommnet: string = ctx.message.text;
            try { 
                const success = await ctx.repository.insertCommentInOrder(order.id, droperCommnet);
                const sendMessage = await ctx.telegram.sendMessage(telegramIdManager, `‚ùå –î—Ä–æ–ø–ø–µ—Ä ${droperId} –¥–æ–±–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ä–¥–µ—Ä—É ‚Ññ${order.id}:\n\n${droperCommnet}`);
                const updateStatus = await ctx.repository.updateOrderStatus(order.id, 'failed');

                if(success && sendMessage && updateStatus) {
                    await ctx.reply(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:`, keyboards.startKeyboard);
                    delete ctx.session.orderId;
                    return ctx.scene.leave();
                } 
            } catch(error) {
                console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ä–¥–µ—Ä—É:`, error);
                await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.`);
                mailingToAllDroppers;
                await ctx.repository.removeDroperFromOrderAndSetStatusOpen(order.id);
                delete ctx.session.orderId;
                return ctx.scene.leave();
            }
        } else {
            await ctx.reply(`‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Å–µ –∑–∞–Ω–æ–≤–æ.`);
            mailingToAllDroppers; 
            delete ctx.session.orderId;
            return ctx.scene.leave();
        }
    }
);