import { Telegraf, Markup, Scenes  } from "telegraf";
import { Repository } from "../Repository/repository";
import { MyContext, SessionData } from "../utils/types";
import { createManagerKeybord } from "../Repository/adminRepository";
import { keyboards } from "../utils/keyboards";
import { exitFunction } from "../utils/exitFunction";
import { adminGetTotalScene } from "./adminGetTotalScene";

const pass = 'admin';

export const adminScene = new Scenes.WizardScene<MyContext>(
    `adminScene`,
     async (ctx) => {
            await ctx.reply(`üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: `, keyboards.exitKeyboard);
            return ctx.wizard.next();
        },
    
    async (ctx) => {
        if (!ctx.message || !('text' in ctx.message)) {
            await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í—ã—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é.`, keyboards.startKeyboard);
            return ctx.scene.leave();
        };
    
        //if(await exitFunction(ctx, ctx.message.text)) return ctx.scene.leave();
        
        // if(ctx.message.text === 'üö™–í—ã–π—Ç–∏') {
        //     return await exitFunction(ctx, ctx.message.text);
        // };

        const exitFunctionResult = await exitFunction(ctx, ctx.message.text);

        if(exitFunctionResult) {
            await ctx.reply(`–í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã...`)
            return ctx.scene.leave();
        }
    
        if (ctx.message.text !== pass) {
            await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.`);
            return;
        } else if( ctx.message.text === pass) {
            await ctx.reply(`‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π.`);
             await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: `, keyboards.adminActionsKeyboard);
    
            return ctx.wizard.next(); 
        }
    },

    // async (ctx) => { 
    //     await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: `, keyboards.adminActionsKeyboard
    // );
    // return ctx.wizard.next();
    // }, 

    async (ctx) => {
        if(!ctx.message || !('text' in ctx.message)) { 
            await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑.`);
            return;
        }

        const exitFunctionResult = await exitFunction(ctx, ctx.message.text);

        if(exitFunctionResult) {
            return ctx.scene.leave();
        }

        const action = ctx.message.text;
        
        
        if (action === 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞') { 
            return ctx.scene.enter('adminDeleteManagerScene')
        } else if (action === 'üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞') {
            return ctx.scene.enter('adminGetTotalScene');
        } else {
            await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.`);
            return ctx.scene.reenter();
        }
    }
)