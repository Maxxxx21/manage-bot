import { Telegraf, Scenes, Markup } from "telegraf";
import { MyContext, SessionData } from "../utils/types";
import { Repository } from "../Repository/repository";
import { keyboards } from "../utils/keyboards";

export const droperGetAllOpenOrdersScene = new Scenes.WizardScene<MyContext>(
    `droperGetAllOpenOrdersScene`,

    async (ctx) => {
        const userId = await ctx.repository.getUser(ctx.from!.id);
        const roleDroperId = await ctx.repository.getRoleIdByName(`‚õëÔ∏è–î—Ä–æ–ø–µ—Ä`);
        const isDroper = await ctx.repository.checkRegisteredUser(userId, roleDroperId as number);

        if (!isDroper) {
            await ctx.reply(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ "‚õëÔ∏è–î—Ä–æ–ø–µ—Ä", –≤–≤–µ–¥—è –∫–æ–º–µ–Ω–¥—É: /register`);
            return ctx.scene.leave();
        }
        // } else if (isDroper) {
        //     // return ctx.wizard.next();
        // }

    // async (ctx) => {
        const getAllOpenOrders = await ctx.repository.getAllOpenOrders();

        if (getAllOpenOrders.length === 0) {
            await ctx.reply(`‚ÑπÔ∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç.`);
            return ctx.scene.leave();
        }

        await ctx.reply(`üìù –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: `);

        for (let order of getAllOpenOrders) {
            const message = `‚ú® –û—Ä–¥–µ—Ä ‚Ññ${order.id}\n\n` +
                `üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ${order.number}\n` +
                `‚úçÔ∏è –¢–∏–ø: ${order.fd_rd}\n` +
                `üë§ –§–ò–û: ${order.cardholder_name}\n` +
                `üíµ –°—É–º–º–∞: ${order.amount} ‚Ç¨`;
            
            const keyboard = Markup.inlineKeyboard([
                Markup.button.callback(`–í–∑—è—Ç—å –æ—Ä–¥–µ—Ä`, `take_order_${order.id}`)
            ]);
            
            await ctx.reply(message, keyboard);
        }

        return ctx.scene.leave();
    }
);