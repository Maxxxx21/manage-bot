import { Scenes, Markup } from "telegraf";
import { MyContext, SessionData } from "../utils/types";
import { keyboards } from "../utils/keyboards";
import { exitFunction } from "../utils/exitFunction";

const passForManager: string = 'man';
const passForDroper:string = 'drop';
const passForAdmin:string = 'admin';

export const userRegistrationScene = new Scenes.WizardScene<MyContext>(
    `userRegistrationScene`,
    async (ctx) => {
        await ctx.reply(`üëâ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: `, keyboards.userRegistrationKeyboard);
        return ctx.wizard.next();
    },

    async (ctx) => {
        if (!ctx.message || !('text' in ctx.message)) {
            await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`);
            return;
        }

        const role: string = ctx.message.text;
        const roles = ["üë®‚Äçüíº–ú–µ–Ω–µ–¥–∂–µ—Ä", "‚õëÔ∏è–î—Ä–æ–ø–µ—Ä", 'üë®‚Äçüíº–ê–¥–º–∏–Ω'];

        if (!roles.includes(role)) {
            await ctx.reply(`‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.`);
            return ctx.wizard.back();
        }

        await ctx.reply(`üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: `);
        const wizardState = ctx.wizard.state as SessionData;
        wizardState.role = role;
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (!ctx.message || !('text' in ctx.message)) {
            await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.`);
            return ctx.scene.reenter();
        }; 

        // if(ctx.message.text === 'üö™–í—ã–π—Ç–∏') {
        //     return await exitFunction(ctx, ctx.message.text);
        // };
        //if (await exitFunction(ctx, ctx.message.text)) return ctx.scene.leave();

        const exitFunctionResult = await exitFunction(ctx, ctx.message.text);

        if(exitFunctionResult) {
            return ctx.scene.leave();
        }

        if (!ctx.from) {
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. (ctx.from)`);
            return;
        }

        const wizardState = ctx.wizard.state as SessionData;
        const role: string = wizardState.role as string;
        const telegram_id: number = ctx.from.id;
        let userId;

        try {
            const existingUser = await ctx.repository.getUser(telegram_id);
            if (existingUser) {
                userId = existingUser;
            } else {
                const newUser = await ctx.repository.addUser(telegram_id);
                if (!newUser) throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
                userId = newUser.id;
            }

        } catch (error) {
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`, error);
            await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`, keyboards.startKeyboard);
            return ctx.scene.leave();
        }

        const password: string = ctx.message.text;
        const roleId: number | null = await ctx.repository.getRoleIdByName(role);
        console.log(userId);
        console.log(userId);
        console.log(userId);
        console.log(userId);
        if (!userId) {
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å User Id –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.`);
            await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.`, keyboards.startKeyboard);
            return ctx.scene.leave();
        }

        if (!roleId) {
            console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å —Ä–æ–ª—å—é.`);
            await ctx.reply(`‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. \n\n‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: `, keyboards.startKeyboard);
            return ctx.scene.leave();
        }

        if ((role === "üë®‚Äçüíº–ú–µ–Ω–µ–¥–∂–µ—Ä" && password !== passForManager) || (role === "‚õëÔ∏è–î—Ä–æ–ø–µ—Ä" && password !== passForDroper) || (role === 'üë®‚Äçüíº–ê–¥–º–∏–Ω' && password !== passForAdmin)) {
            await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: `);
            return ctx.wizard.selectStep(1); // –®–∞–≥ —Å –≤–≤–æ–¥–æ–º –ø–∞—Ä–æ–ª—è
        }

        try {
            const isRegistered: boolean = await ctx.repository.getUserWithRole(userId, roleId);

            if (isRegistered) {
                await ctx.reply(`‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ ${role}.`);
                await ctx.reply(`‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: `, keyboards.startKeyboard);
                console.log(`–Æ–∑–µ—Ä ${userId} —É–∂–µ –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ ${role}.`);
                return ctx.scene.leave();
            } else {
                const addRoleToUser = await ctx.repository.addRoleToUser(userId, role);

                if (addRoleToUser) {
                    await ctx.reply(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ ${role}.`);
                    console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∫–∞–∫ ${role}.`);
                    await ctx.reply(`üö™ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: `, keyboards.startKeyboard);
                    return ctx.scene.leave();
                } else {
                    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞.`);
                    return ctx.scene.leave();
                }
            }
        } catch (error) {
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.`, error);
            await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
            return ctx.scene.leave();
        }
        // await ctx.reply(`üö™ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: `, keyboards.startKeyboard);
        // return ctx.scene.leave();
    }
);