import { Scenes, Telegraf, } from "telegraf"; 
import { MyContext, SessionData } from "../utils/types";
import { createManagerKeybord } from "../Repository/adminRepository";
import { keyboards } from "../utils/keyboards"; 
import { exitFunction } from "../utils/exitFunction";

const pass: string = 'admin';

export const adminDeleteManagerScene = new Scenes.WizardScene<MyContext>(
    "adminDeleteManagerScene",
    // async (ctx) => {
    //     const userId = await ctx.repository.getUser(ctx.from!.id);
    //     const roleManagerId = await ctx.repository.getRoleIdByName(`üë®‚Äçüíº–ê–¥–º–∏–Ω`);
    //     const isManager = await ctx.repository.checkRegisteredUser(userId, roleManagerId as number);

    //     if (!isManager) {
    //         await ctx.reply(`–≠—Ç–∞ –æ–ø—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è üë®‚Äçüíº–ê–¥–º–∏–Ω–∞. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É: /register.`);
    //         return ctx.scene.leave();
    //     } else if (isManager) {
    //         return ctx.wizard.next();
    //     }
    // },
    // async (ctx) => {
    //     await ctx.reply(`üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: `, keyboards.exitKeyboard);
    //     return ctx.wizard.next();
    // },

    // async (ctx) => {
    //     if (!ctx.message || !('text' in ctx.message)) {
    //         await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í—ã—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é.`, keyboards.startKeyboard);
    //         return ctx.scene.leave();
    //     };

    //     if(await exitFunction(ctx, ctx.message.text)) return ctx.scene.leave();

    //     if (ctx.message.text !== pass) {
    //         await ctx.reply(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.`);
    //         return;
    //     } else if( ctx.message.text === pass) {
    //         const allManagers = await ctx.adminRepository.getAllManagersForAdmin();
    //         const keyboard = createManagerKeybord(allManagers);
    //         await ctx.reply(`‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π.`);
    //         await ctx.reply(`–ö–∞–∫–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å?`, keyboard);

    //         return ctx.wizard.next(); 
    //     }
    // },

    async (ctx) => {
        const allManagers = await ctx.adminRepository.getAllManagersForAdmin();
        const keyboard = createManagerKeybord(allManagers);
        await ctx.reply(`–ö–∞–∫–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å?`, keyboard);
        return ctx.wizard.next(); 
    },

    async (ctx) => {
        
        if(!ctx.message || !('text' in ctx.message)) {
            console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–∏ id –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞ —à–∞–≥–µ 0`);
            await ctx.reply(`‚ùå –ü—Ä–æ–∏–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.`);
            await ctx.reply(`‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π: `, keyboards.startKeyboard);
            return ctx.scene.leave();
        };

        const exitFunctionResult = await exitFunction(ctx, ctx.message.text);

        if(exitFunctionResult) {
            return ctx.scene.leave();
        }

        const allManagers = await ctx.adminRepository.getAllManagersForAdmin();
        const keyboard = createManagerKeybord(allManagers);

        // const exitFunctionResult = await exitFunction(ctx, ctx.message.text);

        // if(exitFunctionResult) {
        //     return ctx.scene.leave();
        // }

        const managerIdUserInput: string = ctx.message.text;
        const managerIdUnprocessed: string[] = managerIdUserInput.split(' ');
        const managerId: number = Number(managerIdUnprocessed[1]);
        const roleId: number | null = await ctx.repository.getRoleIdByName('üë®‚Äçüíº–ú–µ–Ω–µ–¥–∂–µ—Ä');
        
        if(isNaN(managerId)) {
            if (isNaN(managerId)) {
                await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.`, keyboard);
                return ctx.scene.reenter();
            }
        } 

        if (roleId === null) {
            console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.`);
            await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.`, keyboard);
            return ctx.scene.reenter();
        }

        const deactivateUser = await ctx.adminRepository.doActivateOrDeactivateUser(managerId, false);
        
        if (!deactivateUser) {
            console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
            await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.`, keyboard);
        } 

        await ctx.reply(`üóëÔ∏è‚Ü©Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä ${managerId} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω ‚úÖ. \n\n‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:`, keyboards.startKeyboard);
        return ctx.scene.leave(); 
    }
);