import { Scenes, Telegraf, } from "telegraf"; 
import { MyContext, SessionData } from "../utils/types";
import { createManagerKeybord } from "../Repository/adminRepository";
import { keyboards } from "../utils/keyboards"; 

export const adminDeleteManagerScene = new Scenes.WizardScene<MyContext>(
    "adminDeleteManagerScene", 
    async (ctx) => {
        const allManagers = await ctx.adminRepository.getAllManagersForAdmin();
        const keyboard = createManagerKeybord(allManagers);
        await ctx.reply(`–ö–∞–∫–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å?`, keyboard);
        return ctx.wizard.next(); 
    },

    async (ctx) => {
        
        if(!ctx.message || !('text' in ctx.message)) {
            console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–∏ id –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞ —à–∞–≥–µ 0`);
            await ctx.reply(`‚ùå –ü—Ä–æ–∏–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.`);
            await ctx.reply(`‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π: `, keyboards.startKeyboard);
            return ctx.scene.leave();
        }

        const allManagers = await ctx.adminRepository.getAllManagersForAdmin();
        const keyboard = createManagerKeybord(allManagers);

        if(ctx.message.text === 'üö™–í—ã–π—Ç–∏') {
            await ctx.reply(`üîô –í—ã—Ö–æ–¥–∏–º...`, keyboard);
            return ctx.scene.leave();
        }

        const managerIdUserInput: string = ctx.message.text;
        const managerIdUnprocessed: string[] = managerIdUserInput.split(' ');
        const managerId: number = Number(managerIdUnprocessed[1]);
        const roleId: number | null = await ctx.repository.getRoleIdByName('üë®‚Äçüíº–ú–µ–Ω–µ–¥–∂–µ—Ä');
        
        if(isNaN(managerId)) {
            if (isNaN(managerId)) {
                await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.`, keyboard);
                return ctx.scene.reenter();
            }
        } 

        if (roleId === null) {
            console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.`);
            await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.`, keyboard);
            return ctx.scene.reenter();
        }

        const deleteUserRoleResult = await ctx.adminRepository.deleteUserRole(managerId, roleId);

        if(!deleteUserRoleResult) { 
            console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏.`);
            await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.`, keyboard);
            return ctx.scene.reenter();
        }

        const deleteUserResult = await ctx.adminRepository.deleteUser(managerId);
        
        if (!deleteUserResult) {
            console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
            await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.`, keyboard);
        } 

        await ctx.reply(`‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä ${managerId} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω. \n\n‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:`, keyboards.startKeyboard);
        return ctx.scene.leave(); 
    }
);